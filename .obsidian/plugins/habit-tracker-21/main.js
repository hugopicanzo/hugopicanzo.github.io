/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HabitTracker21
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/HabitTracker.ts
var import_obsidian = require("obsidian");
var PLUGIN_NAME = "Habit Tracker 21";
var DAYS_TO_LOAD = 22;
var DEFAULT_SETTINGS = {
  path: "",
  lastDisplayedDate: getTodayDate(),
  // today
  range: DAYS_TO_LOAD,
  rootElement: void 0,
  habitsGoHere: void 0
};
function getTodayDate() {
  const today = new Date();
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, "0");
  const day = String(today.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
}
var HabitTracker = class {
  constructor(src, el, ctx, app) {
    this.app = app;
    this.settings = this.loadSettings(src);
    this.settings.rootElement = el;
    this.settings.path = JSON.parse(src).path;
    this.settings.lastDisplayedDate = JSON.parse(src).lastDisplayedDate || this.settings.lastDisplayedDate;
    const files = this.loadFiles();
    if (files.length === 0) {
      this.renderNoHabitsFoundMessage();
      return;
    }
    console.log(
      `${PLUGIN_NAME} loaded successfully ${files.length} file(s) from ${this.settings.path}`
    );
    this.settings.habitsGoHere = this.renderRoot(el);
    this.renderHeader(this.settings.habitsGoHere);
    files.forEach(async (f) => {
      this.renderHabit(f.path, await this.getHabitEntries(f.path));
    });
  }
  loadFiles() {
    return this.app.vault.getMarkdownFiles().filter((file) => {
      if (!file.path.includes(this.settings.path)) {
        return false;
      }
      return true;
    }).sort((a, b) => a.name.localeCompare(b.name));
  }
  loadSettings(rawSettings) {
    try {
      return Object.assign({}, DEFAULT_SETTINGS, JSON.parse(rawSettings));
    } catch (error) {
      new import_obsidian.Notice(
        `${PLUGIN_NAME}: received invalid settings. continuing with default settings`
      );
      return DEFAULT_SETTINGS;
    }
  }
  renderNoHabitsFoundMessage() {
    this.settings.rootElement.createEl("div", {
      text: `No habits found under ${this.settings.path}`
    });
  }
  renderRoot(parent) {
    const rootElement = parent.createEl("div", {
      cls: "habit_tracker"
    });
    rootElement.addEventListener("click", (e) => {
      const target = e.target;
      if (target == null ? void 0 : target.classList.contains("habit-tick")) {
        this.toggleHabit(target);
      }
    });
    return rootElement;
  }
  renderHeader(parent) {
    const header = parent.createEl("div", {
      cls: "habit-tracker__header habit-tracker__row"
    });
    header.createEl("div", {
      text: "",
      cls: "habit-cell__name habit-cell"
    });
    const currentDate = this.createDateFromFormat(
      this.settings.lastDisplayedDate
    );
    currentDate.setDate(currentDate.getDate() - this.settings.range + 1);
    for (let i = 0; i < this.settings.range; i++) {
      const day = currentDate.getDate().toString();
      header.createEl("span", {
        cls: `habit-cell habit-cell--${this.getDayOfWeek(currentDate)}`,
        text: day
      });
      currentDate.setDate(currentDate.getDate() + 1);
    }
  }
  async getFrontmatter(path) {
    const file = this.app.vault.getAbstractFileByPath(path);
    if (!file) {
      new import_obsidian.Notice(`${PLUGIN_NAME}: No file found for path: ${path}`);
      return {};
    }
    try {
      return await this.app.vault.read(file).then((result) => {
        const frontmatter = result.split("---")[1];
        if (!frontmatter)
          return {};
        return (0, import_obsidian.parseYaml)(frontmatter);
      });
    } catch (error) {
      return {};
    }
  }
  async getHabitEntries(path) {
    const fm = await this.getFrontmatter(path);
    return fm.entries || [];
  }
  renderHabit(path, entries) {
    var _a;
    if (!this.settings.habitsGoHere) {
      new import_obsidian.Notice(`${PLUGIN_NAME}: missing div that holds all habits`);
      return null;
    }
    const parent = this.settings.habitsGoHere;
    const name = (_a = path.split("/").pop()) == null ? void 0 : _a.replace(".md", "");
    let row = parent.querySelector(`*[data-id="${this.pathToId(path)}"]`);
    if (!row) {
      row = this.settings.habitsGoHere.createEl("div", {
        cls: "habit-tracker__row"
      });
      row.setAttribute("data-id", this.pathToId(path));
    } else {
      this.removeAllChildNodes(row);
    }
    const habitTitle = row.createEl("a", {
      text: name,
      cls: "habit-cell__name habit-cell internal-link"
    });
    habitTitle.setAttribute("href", path);
    habitTitle.setAttribute("aria-label", path);
    const currentDate = this.createDateFromFormat(
      this.settings.lastDisplayedDate
    );
    currentDate.setDate(currentDate.getDate() - this.settings.range + 1);
    const entriesSet = new Set(entries);
    for (let i = 0; i < this.settings.range; i++) {
      const dateString = this.getDateId(currentDate);
      const isTicked = entriesSet.has(dateString);
      const habitCell = row.createEl("div", {
        cls: `habit-cell
				habit-tick habit-tick--${isTicked}
				habit-cell--${this.getDayOfWeek(currentDate)}`
      });
      habitCell.setAttribute("ticked", isTicked.toString());
      habitCell.setAttribute("date", dateString);
      habitCell.setAttribute("habit", path);
      currentDate.setDate(currentDate.getDate() + 1);
    }
  }
  async toggleHabit(el) {
    const habit = el.getAttribute("habit");
    const date = el.getAttribute("date");
    const file = this.app.vault.getAbstractFileByPath(habit);
    const isTicked = el.getAttribute("ticked");
    if (!file) {
      new import_obsidian.Notice(`${PLUGIN_NAME}: file missing while trying to toggle habit`);
      return;
    }
    this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      let entries = frontmatter["entries"] || [];
      if (isTicked === "true") {
        entries = entries.filter((e) => e !== date);
      } else {
        entries.push(date);
        entries.sort();
      }
      frontmatter["entries"] = entries;
    });
    this.renderHabit(file.path, await this.getHabitEntries(file.path));
  }
  writeFile(file, content) {
    if (!content) {
      new import_obsidian.Notice(
        `${PLUGIN_NAME}: could not save changes due to missing content`
      );
      return null;
    }
    try {
      return this.app.vault.modify(file, content);
    } catch (error) {
      new import_obsidian.Notice(`${PLUGIN_NAME}: could not save changes`);
      return Promise.reject(error);
    }
  }
  removeAllChildNodes(parent) {
    while (parent.firstChild) {
      parent.removeChild(parent.firstChild);
    }
  }
  pathToId(path) {
    return path.replaceAll("/", "_").replaceAll(".", "__").replaceAll(" ", "___");
  }
  createDateFromFormat(dateString) {
    const [year, month, day] = dateString.split("-").map(Number);
    const date = new Date();
    date.setFullYear(year);
    date.setMonth(month - 1);
    date.setDate(day);
    return date;
  }
  getDateId(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
    let dateId = `${year}-${month}-${day}`;
    return dateId;
  }
  getDayOfWeek(date) {
    const daysOfWeek = [
      "sunday",
      "monday",
      "tuesday",
      "wednesday",
      "thursday",
      "friday",
      "saturday"
    ];
    const dayIndex = date.getDay();
    const dayName = daysOfWeek[dayIndex];
    return dayName.toLowerCase();
  }
};

// src/main.ts
var PLUGIN_NAME2 = "Habit Tracker 21";
var HabitTracker21 = class extends import_obsidian2.Plugin {
  async onload() {
    console.log(`${PLUGIN_NAME2}: loading...`);
    this.registerMarkdownCodeBlockProcessor(
      "habittracker",
      async (src, el, ctx) => {
        new HabitTracker(src, el, ctx, this.app);
      }
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
